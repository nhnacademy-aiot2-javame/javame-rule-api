name: CI/CD for Spring Boot with Docker

// 메인에 풀리퀘스트가 되거나 푸시될때 작동
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
   

// 작동 순서
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: javame-trans-service
      //사용할 컨테이너 이름

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK environment
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      //CI 하는 서버 (광주서버가 아님)에서 사용할 jdk 버전

      # Build the Spring Boot application
      - name: Build with Maven
        run: mvn clean package -DskipTests
     

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      // 도커 허브 가입 ( 깃허브 연결 추천 토큰 발급 받아야함 )

 
      # 도커 이미지 생성 후 Hub에 등록
      - name: Build & Push Docker Image
        run: |
            IMAGE_TAG=${{ github.sha }}
            docker build -t janggon/javame-trans-service:$IMAGE_TAG .
            docker push janggon/javame-trans-service:$IMAGE_TAG
            echo "TRANS_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
     
        //Docker-Hub에 레포지를 파야함(이미지를 등록할 레포) 
        // -t 태그쓰겠다는 옵션 github.sha -> 깃허브 커밋의 해시값 ( 커밋별 이미지 업데이트 확인 가능)
        // echo "TRANS_IMAGE_TAG" 자신의 레포 앞글자 따와서 변경 (EX- AI_IMAGE_TAG(버전관리))

      # Deploy the application using Docker-Compose
      - name: Deploy to Remote Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
            host: ${{ secrets.REMOTE_HOST }}
            username: ${{ secrets.REMOTE_USER }}
            port: 8822
            key: ${{ secrets.PRIVATE_KEY }}
            script: |
              COMPOSE_DIR="/home/aiot2/aiot2-team3/docker/javame"
              cd $COMPOSE_DIR
              
              # ① .env에 방금 빌드한 이미지 태그 기록
              echo "TRANS_IMAGE_TAG=${{ env.TRANS_IMAGE_TAG }}" > .env
              
              RUNNING=$(docker-compose ps -q $SERVICE_NAME)
              
              if [ -n "$RUNNING" ]; then
                echo "$SERVICE_NAME is running → stop & rm & up only this service"
                docker-compose stop $SERVICE_NAME
                docker-compose rm -f $SERVICE_NAME
                docker-compose up -d $SERVICE_NAME
              else
                echo "$SERVICE_NAME is not running → full restart"
                docker-compose down
                docker-compose up -d
              fi
